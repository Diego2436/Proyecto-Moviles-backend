# Generated by Django 5.0.1 on 2024-01-13 06:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import django.db.models.deletion
from django.db import migrations, models
from decimal import Decimal
import secrets, string, random

def generar_contrasena_aleatoria(longitud=6):
    caracteres = string.ascii_letters + string.digits  # letras y dígitos
    contrasena_plana = ''.join(secrets.choice(caracteres) for _ in range(longitud))
    return contrasena_plana

def generar_correo_aleatorio(nombre):
    dominios = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com']
    nombre_sin_espacios = nombre.replace(" ", "").lower()
    numero_aleatorio = random.randint(100, 999)
    dominio_aleatorio = random.choice(dominios)
    correo_aleatorio = f"{nombre_sin_espacios}{numero_aleatorio}@{dominio_aleatorio}"
    return correo_aleatorio

def generar_username(nombre):
    nombre_formateado = nombre.lower().replace(" ", "_", 1)
    caracteres_adicionales = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(4))
    username_generado = f"{nombre_formateado}_{caracteres_adicionales}"

    return username_generado

def cargar_datos_iniciales(apps, schema_editor):
    FoodTruck = apps.get_model('api', 'FoodTruck')
    Empleado = apps.get_model('api', 'Empleado')
    Producto = apps.get_model('api', 'Producto')
    Usuario = apps.get_model('api', 'Usuario')
    Categoria = apps.get_model('api', 'Categoria')
    ProductoHasCategoria = apps.get_model('api', 'ProductoHasCategoria')

    # Crear FoodTrucks
    foodtruck1 = FoodTruck.objects.create(nombre='Sabores del Sur', descripcion='Comida tradicional del sur de México')
    foodtruck2 = FoodTruck.objects.create(nombre='Sushi Express', descripcion='Delicioso sushi para llevar')
    foodtruck3 = FoodTruck.objects.create(nombre='Burger Fusion', descripcion='Hamburguesas gourmet con un toque único')

    #Crear Empleados aleatorios
    with open('empleados_data.txt', 'w') as file:
        for foodtruck in [foodtruck1, foodtruck2, foodtruck3]:
            for i in range(4):  # 4 employees per food truck (2 employees and 2 delivery persons)
                nombre = f'{random.choice(["Juan", "María", "Carlos", "Laura", "Pedro", "Ana", "Ricardo", "Isabel", "Fernando", "Diana", "Javier", "Sofia"])} {random.choice(["Perez", "Rodriguez", "Gutierrez", "Chavez", "Hernandez", "Lopez", "Martinez", "Morales", "Garcia", "Ramirez", "Rodriguez", "Alvarez"])}'
                
                correo = generar_correo_aleatorio(nombre)
                password_random = generar_contrasena_aleatoria()
                codigo = secrets.token_hex(int(20/2))
                username = generar_username(nombre)

                rol = 'Empleado' if i < 2 else 'Repartidor'

                # Save employee data to the text file
                file.write(f"Email: {correo}\n")
                file.write(f"Username: {username}\n")
                file.write(f"Password: {password_random}\n")
                file.write(f"Nombre: {nombre}\n")
                file.write(f"Rol: {rol}\n")
                file.write(f"FoodTruck: {foodtruck.nombre}\n")
                file.write("\n")

                # Create Usuario (User) object in the database
                usuario = Usuario.objects.create_user(password=password_random,
                                                is_superuser=0,
                                                username = username,
                                                email=correo,
                                                is_staff=0,
                                                is_active=1,
                                                codigo=codigo,
                                                verificacion="YES",
                                                tipo="employee")

                # Create Empleado (Employee) object in the database and associate with the user
                Empleado.objects.create(nombre=nombre, rol=rol, foodtruck=foodtruck, usuario=usuario)

    # Precargar usuario Cliente de prueba
    usuario = Usuario.objects.create_user(password="12345",
                                    is_superuser=0,
                                    username = "testUser",
                                    email="test@outlook.com",
                                    is_staff=0,
                                    is_active=1,
                                    codigo="075487c0b3609c5cfd98",
                                    verificacion="YES",
                                    tipo="user")

    # Crear Productos para FoodTruck 1
    Producto.objects.create(nombre='Tacos al Pastor', descripcion='Tacos de cerdo adobado con piña', precio=Decimal('30.00'), imagen='fd1_tacos_al_pastor.jpg', foodtruck=foodtruck1)
    Producto.objects.create(nombre='Quesadillas Mixtas', descripcion='Quesadillas con variedad de quesos y guarniciones', precio=Decimal('25.50'), imagen='fd1_quesadillas_mixtas.jpg',foodtruck=foodtruck1)
    Producto.objects.create(nombre='Guacamole con Totopos', descripcion='Guacamole fresco con totopos', precio=Decimal('15.00'), imagen='fd1_guacamole_con_totopos.jpg', foodtruck=foodtruck1)
    Producto.objects.create(nombre='Tortas de Carnitas', descripcion='Tortas con carnitas de cerdo', precio=Decimal('40.00'), imagen='fd1_tortas_de_carnitas.jpg', foodtruck=foodtruck1)
    Producto.objects.create(nombre='Aguas Frescas', descripcion='Variedad de aguas frescas', precio=Decimal('10.00'), imagen='fd1_aguas_frescas.jpg', foodtruck=foodtruck1)

    # Crear Productos para FoodTruck 2
    Producto.objects.create(nombre='Sushi Roll Tropical', descripcion='Roll de sushi con ingredientes tropicales', precio=Decimal('50.00'), imagen='fd2_sushi_roll_tropical.jpg', foodtruck=foodtruck2)
    Producto.objects.create(nombre='Tempura de Verduras', descripcion='Verduras tempurizadas con salsa de soja', precio=Decimal('35.75'), imagen='fd2_tempura_de_verduras.jpg', foodtruck=foodtruck2)
    Producto.objects.create(nombre='Nigiri de Salmón', descripcion='Nigiri de salmón fresco', precio=Decimal('25.00'), imagen='fd2_nigiri_de_salmon.jpg', foodtruck=foodtruck2)
    Producto.objects.create(nombre='Roll de Aguacate', descripcion='Roll de sushi con aguacate y pepino', precio=Decimal('40.00'), imagen='fd2_roll_de_aguacate.jpg', foodtruck=foodtruck2)
    Producto.objects.create(nombre='Sopa Miso', descripcion='Sopa tradicional japonesa', precio=Decimal('20.00'), imagen='fd2_sopa_miso.jpg', foodtruck=foodtruck2)

    # Crear Productos para FoodTruck 3
    Producto.objects.create(nombre='Burger Deluxe', descripcion='Hamburguesa gourmet con queso azul y cebolla caramelizada', precio=Decimal('60.00'), imagen='fd3_burger_deluxe.jpg', foodtruck=foodtruck3)
    Producto.objects.create(nombre='Papas Gourmet', descripcion='Papas fritas con alioli y hierbas finas', precio=Decimal('30.50'), imagen='fd3_papas_gourmet.jpg', foodtruck=foodtruck3)
    Producto.objects.create(nombre='Tacos de Ribeye', descripcion='Tacos con carne de ribeye y guacamole', precio=Decimal('45.00'), imagen='fd3_tacos_de_ribeye.jpg', foodtruck=foodtruck3)
    Producto.objects.create(nombre='Ensalada César con Pollo', descripcion='Ensalada con pollo a la parrilla y aderezo césar', precio=Decimal('35.00'), imagen='fd3_ensalada_cesar_con_pollo.jpg', foodtruck=foodtruck3)
    Producto.objects.create(nombre='Malteadas Clásicas', descripcion='Malteadas con sabores clásicos', precio=Decimal('25.00'), imagen='fd3_malteadas_clasicas.jpg', foodtruck=foodtruck3)

    # Crear Categorías
    categorias_data = [
        {'categoria': 'Tacos', 'informacion': 'Variedad de tacos'},
        {'categoria': 'Quesadillas', 'informacion': 'Deliciosas quesadillas'},
        {'categoria': 'Entradas', 'informacion': 'Entradas frescas y deliciosas'},
        {'categoria': 'Tortas', 'informacion': 'Tortas con sabores únicos'},
        {'categoria': 'Bebidas', 'informacion': 'Refrescantes bebidas'},
        {'categoria': 'Sushi', 'informacion': 'Auténtico sushi japonés'},
        {'categoria': 'Sopas', 'informacion': 'Sopas tradicionales'},
        {'categoria': 'Hamburguesas', 'informacion': 'Hamburguesas gourmet'},
        {'categoria': 'Acompañamientos', 'informacion': 'Acompañamientos deliciosos'},
        {'categoria': 'Ensaladas', 'informacion': 'Ricas ensaladas saludables'},
    ]

    for categoria_data in categorias_data:
        Categoria.objects.get_or_create(**categoria_data)

    # Asociar Categorías con Productos
    productos_categorias_data = [
        {'producto': Producto.objects.get(nombre='Tacos al Pastor'), 'categoria': Categoria.objects.get(categoria='Tacos')},
        {'producto': Producto.objects.get(nombre='Quesadillas Mixtas'), 'categoria': Categoria.objects.get(categoria='Quesadillas')},
        {'producto': Producto.objects.get(nombre='Guacamole con Totopos'), 'categoria': Categoria.objects.get(categoria='Entradas')},
        {'producto': Producto.objects.get(nombre='Tortas de Carnitas'), 'categoria': Categoria.objects.get(categoria='Tortas')},
        {'producto': Producto.objects.get(nombre='Aguas Frescas'), 'categoria': Categoria.objects.get(categoria='Bebidas')},
        {'producto': Producto.objects.get(nombre='Sushi Roll Tropical'), 'categoria': Categoria.objects.get(categoria='Sushi')},
        {'producto': Producto.objects.get(nombre='Tempura de Verduras'), 'categoria': Categoria.objects.get(categoria='Entradas')},
        {'producto': Producto.objects.get(nombre='Nigiri de Salmón'), 'categoria': Categoria.objects.get(categoria='Sushi')},
        {'producto': Producto.objects.get(nombre='Roll de Aguacate'), 'categoria': Categoria.objects.get(categoria='Sushi')},
        {'producto': Producto.objects.get(nombre='Sopa Miso'), 'categoria': Categoria.objects.get(categoria='Sopas')},
        {'producto': Producto.objects.get(nombre='Burger Deluxe'), 'categoria': Categoria.objects.get(categoria='Hamburguesas')},
        {'producto': Producto.objects.get(nombre='Papas Gourmet'), 'categoria': Categoria.objects.get(categoria='Acompañamientos')},
        {'producto': Producto.objects.get(nombre='Tacos de Ribeye'), 'categoria': Categoria.objects.get(categoria='Tacos')},
        {'producto': Producto.objects.get(nombre='Ensalada César con Pollo'), 'categoria': Categoria.objects.get(categoria='Ensaladas')},
        {'producto': Producto.objects.get(nombre='Malteadas Clásicas'), 'categoria': Categoria.objects.get(categoria='Bebidas')},
        # Add more associations as needed
    ]

    for producto_categoria_data in productos_categorias_data:
        ProductoHasCategoria.objects.create(**producto_categoria_data)



class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categoria', models.CharField(default=None, max_length=45, null=True)),
                ('informacion', models.CharField(default=None, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodTruck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(default=None, max_length=255, null=True)),
                ('descripcion', models.TextField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('codigo', models.CharField(default=None, max_length=25, null=True)),
                ('verificacion', models.CharField(default='NO', max_length=3)),
                ('tipo', models.CharField(default='user', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'api_usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Empleado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50, null=True)),
                ('rol', models.CharField(max_length=10, null=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('foodtruck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.foodtruck')),
            ],
        ),
        migrations.CreateModel(
            name='Pedido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('precio_total', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('fecha_pedido', models.CharField(max_length=45, null=True)),
                ('fecha_entrega', models.CharField(max_length=45, null=True)),
                ('fecha_repartidor', models.CharField(max_length=45, null=True)),
                ('estado', models.CharField(max_length=100, null=True)),
                ('direccion', models.CharField(max_length=400, null=True)),
                ('empleado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.empleado', null=True)),
                ('foodtruck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.foodtruck')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Producto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(default=None, max_length=255, null=True)),
                ('descripcion', models.TextField(default=None, null=True)),
                ('precio', models.DecimalField(decimal_places=2, default=None, max_digits=10, null=True)),
                ('imagen', models.CharField(default=None, max_length=50, null=True)),
                ('foodtruck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.foodtruck')),
            ],
        ),
        migrations.CreateModel(
            name='DetallesPedido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.IntegerField(null=True)),
                ('pedido', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.pedido')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.producto')),
            ],
        ),
        migrations.CreateModel(
            name='ProductoHasCategoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.categoria')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.producto')),
            ],
        ),
        migrations.RunPython(cargar_datos_iniciales),
    ]
